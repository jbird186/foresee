#use "core.4c"
#use "stdconv.4c"

// int fd -- [bytes_written, -1]
:fwrite_int { swap __write_int_to_temp rot fwrite }

:put { __write_int_to_temp stdout }
#macro show{dup put}

:putc {
    &__std_buf!
    &__std_buf 1 stdout
}
#macro showc{dup putc}
#macro cr{'\n' putc}
#macro sp{' ' putc}

:puts {
    while dup@c dup {
        putc 1+
    } drop drop
}
#macro shows{dup puts}

:eput { __write_int_to_temp stderr }
:eputc {
    &__std_buf!
    &__std_buf 1 stderr
}
:eputs {
    while dup@c dup {
        eputc 1+
    } drop drop
}

// -- char
:readc {
    &__std_buf 1 stdin drop
    &__std_buf@c
}

// -- int
:read {
    &__std_buf 24 stdin drop

    // -- buf
    &__std_buf
    // -- is_neg buf
    dup@c '-' == swap
    if over { 1+ }

    // -- is_neg total buf
    0 swap

    // -- is_neg total buf c
    while dup@c dup '\n' != {
        '0' -
        rot 10* +
        swap 1+
    }
    // -- is_neg total
    drop drop
    if swap { -1* }
}

:stdinln {
    over swap stdin
    1 -
    dup rot +
    0 swap !c
}