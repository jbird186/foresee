// ptr -- len
:pub strlen {
    dup
    while dup@c { 1+ }
    swap -
}

// src dest --
:pub strcpy {
    while over@c dup {
        over!c
        1+ swap 1+ swap
    } drop
    0 swap !c
    drop
}

// src dest --
:pub strcat {
    dup strlen +
    strcpy
}

// s1 s2 -- diff
:pub strcmp {
    while over@c over@c | {
        if over@c over@c - dup {
            rot rot drop drop
            return
        } drop
        1+ swap 1+ swap
    }
    drop drop
    0
}

// s1 s2 n -- diff
:pub strncmp {
    $int n: {}
    while (over@c over@c | flag) (n flag) & {
        if over@c over@c - dup {
            rot rot drop drop
            return
        } drop
        1+ swap 1+ swap
        1 -=n
    }
    drop drop
    0
}

// s1 s2 -- is_eq
:pub streq { strcmp not }

// s1 s2 n -- is_eq
:pub strneq { strncmp not }

// str char -- [ptr, 0]
:pub strchr {
    while over@c dup {
        if over == {
            drop
            return
        }
        swap 1+ swap
    } drop
    drop drop
    0
}