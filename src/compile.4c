#use "std/stdstr.4c"
#use "std/stdchar.4c"
#use "src/config.4c"
#use "src/map.4c"
#use "src/op.4c"

$static ptr out_fd

// ptr --
:coms {
    if dup str_len out_fd fwrite is_failure {
        "ERROR: Failed to write string to output file\n"eputs
        1 exit
    }
}
// int --
:com {
    if out_fd fwrite_int is_failure {
        "ERROR: Failed to write integer to output file\n"eputs
        1 exit
    }
}
// char --
:comc {
    $char buf
    &buf!c
    if &buf 1 out_fd fwrite is_failure {
        "ERROR: Failed to write character to output file\n"eputs
        1 exit
    }
}

// item --
#macro compile_push_generic(com_type) {
    "    sub     "coms &stack_reg_str coms ", 8\n"coms
    "    mov     qword ["coms &stack_reg_str coms "], "coms com_type "\n"coms
}
// item --
:compile_push { compile_push_generic(coms) }
// item --
:compile_push_int { compile_push_generic(com) }
// --
:compile_stack_shrink {
    "    add     "coms &stack_reg_str coms ", 8\n" coms
}
// item --
:compile_pop {
    "    mov     "coms coms ", qword ["coms &stack_reg_str coms "]\n"coms
    compile_stack_shrink
}

:compile_ops

// idx map_slot_ptr -- idx
:compile_function {
    "; "coms dup->Function.name@ coms "\n"coms
    "f_"coms over com ":\n"coms
    "    push    rbp\n"coms
    "    mov     rbp, rsp\n"coms
    ->Function.def@ compile_ops
}

:compile_functions {
    // -- idx
    0 while dup MAP_SIZE < {
        // -- idx slot_ptr
        dup FN_MAP map_idx
        if dup slot_is_used { compile_function }
        else { drop }
        1+
    } drop
}

// b_register instruction name --
:compile_basic_binop {
    "    ; "coms coms "\n"coms
    "rcx" compile_pop
    "rax" compile_pop
    "    "coms coms " \trax, "coms coms "\n"coms
    "rax" compile_push
}

// op_ptr -- new_op_ptr
:compile_op {
    if viewok OKind.NOOP == {}
    else if viewok OKind.EXIT == {
        "    ; OP_EXIT\n"coms
        "rdi" compile_pop
        "    mov     eax, 60\n"coms
        "    syscall\n"coms
    }
    else if viewok OKind.CALL == {
        "    ; OP_CALL\n"coms
        "rax" compile_pop
        "    call rax\n"coms
    }
    else if viewok OKind.PUSH_FN == {
        "    ; OP_PUSH_FN\n"coms
        "    lea rax, [rel f_"coms viewod com "]\n"coms
        "rax" compile_push
    }
    else if viewok OKind.CALL_FN == {
        "    ; OP_CALL_FN\n"coms
        "    call f_"coms viewod com "\n"coms
    }
    else if viewok OKind.RET == {
        "    ; OP_RET\n"coms
        "    leave\n"coms
        "    ret\n"coms
    }
    else if viewok OKind.PUSH_INT == {
        "    ; OP_PUSH_INT\n"coms
        viewod compile_push_int
    }
    else if viewok OKind.DROP == {
        "    ; OP_DROP\n"coms
        compile_stack_shrink
    }
    else if viewok OKind.PICK == {
        "    ; OP_PICK\n"coms
        "rax" compile_pop
        "    mov     rcx, ["coms &stack_reg_str coms " + rax*8]\n"coms
        "rcx" compile_push
    }
    else if viewok OKind.ROLL == {
        "    ; OP_ROLL\n"coms
        "rax" compile_pop
        "    mov     rcx, ["coms &stack_reg_str coms " + rax*8]\n"coms
        "    lea     rbx, ["coms &stack_reg_str coms " + rax*8]\n"coms
        "    .rl_"coms viewod com ":\n"coms
        "    cmp     rbx, "coms &stack_reg_str coms "\n"coms
        "    je      .rl_"coms viewod 1+ com "\n"coms
        "    mov     rdx, [rbx - 8]\n"coms
        "    mov     [rbx], rdx\n"coms
        "    sub     rbx, 8\n"coms
        "    jmp     .rl_"coms viewod com "\n"coms
        "    .rl_"coms viewod 1+ com ":\n"coms
        "    mov     ["coms &stack_reg_str coms "], rcx\n"coms
    }
    else if viewok OKind.DEPTH == {
        "    ; OP_DEPTH\n"coms
        "    mov     rax, b_stack + "coms &stack_size_str coms "\n"coms
        "    sub     rax, "coms &stack_reg_str coms "\n"coms
        "    shr     rax, 3\n"coms
        "rax" compile_push
    }
    else if viewok OKind.PUSH_BUF == {
        "    ; OP_PUSH_BUF\n"coms
        viewod compile_push_generic({"b_"coms com})
    }
    else if viewok OKind.STORE == {
        "    ; OP_STORE\n"coms
        "rax" compile_pop
        "rcx" compile_pop
        "    mov     [rax], rcx\n"coms
    }
    else if viewok OKind.FETCH == {
        "    ; OP_FETCH\n"coms
        "rax" compile_pop
        "    mov     rbx, qword [rax]\n"coms
        "rbx" compile_push
    }
    else if viewok OKind.PUSH_VAR == {
        "    ; OP_PUSH_VAR\n"coms
        "    lea     rax, [rbp - "coms viewod com "]\n"coms
        "rax" compile_push
    }
    else if viewok OKind.ALLOC == {
        "    ; OP_ALLOC\n"coms
        "    sub     rsp, "coms viewod com "\n"coms
    }
    else if viewok OKind.DEALLOC == {
        "    ; OP_DEALLOC\n"coms
        "    add     rsp, "coms viewod com "\n"coms
    }
    else if viewok OKind.ADD == {
        "rcx" "add" "OP_ADD" compile_basic_binop
    }
    else if viewok OKind.SUB == {
        "rcx" "sub" "OP_SUB" compile_basic_binop
    }
    else if viewok OKind.MUL == {
        "rcx" "imul" "OP_MUL" compile_basic_binop
    }
    else if viewok OKind.DIV == {
        "    ; OP_DIV\n"coms
        "rbx" compile_pop
        "rax" compile_pop
        "    cqo\n"coms
        "    idiv    rbx\n"coms
        "rax" compile_push
    }
    else if viewok OKind.AND == {
        "rcx" "and" "OP_AND" compile_basic_binop
    }
    else if viewok OKind.OR == {
        "rcx" "or" "OP_OR" compile_basic_binop
    }
    else if viewok OKind.XOR == {
        "rcx" "xor" "OP_XOR" compile_basic_binop
    }
    else if viewok OKind.SHL == {
        "cl" "shl" "OP_SHL" compile_basic_binop
    }
    else if viewok OKind.SHR == {
        "cl" "shr" "OP_SHR" compile_basic_binop
    }
    else if viewok OKind.SAR == {
        "cl" "sar" "OP_SAR" compile_basic_binop
    }
    else if viewok OKind.NOT == {
        "    ; OP_NOT\n"coms
        "rax" compile_pop
        "    not     rax\n"coms
        "rax" compile_push
    }
    else if viewok OKind.EQ == {
        "    ; OP_EQ\n"coms
        "rbx" compile_pop
        "rax" compile_pop
        "    cmp     rax, rbx\n"coms
        "    sete    al\n"coms
        "    movzx   rax, al\n"coms
        "rax" compile_push
    }
    else if viewok OKind.GT == {
        "    ; OP_GT\n"coms
        "rbx" compile_pop
        "rax" compile_pop
        "    cmp     rax, rbx\n"coms
        "    setg    al\n"coms
        "    movzx   rax, al\n"coms
        "rax" compile_push
    }
    else if viewok OKind.LT == {
        "    ; OP_LT\n"coms
        "rbx" compile_pop
        "rax" compile_pop
        "    cmp     rax, rbx\n"coms
        "    setl    al\n"coms
        "    movzx   rax, al\n"coms
        "rax" compile_push
    }
    else if viewok OKind.LABEL == {
        ".l_"coms viewod com ":\n"coms
    }
    else if viewok OKind.JMP == {
        "    ; OP_JMP\n"coms
        "    jmp     .l_"coms viewod com "\n"coms
    }
    else if viewok OKind.JZ == {
        "    ; OP_JZ\n"coms
        "rax" compile_pop
        "    test    rax, rax\n"coms
        "    jz     .l_"coms viewod com "\n"coms
    }
    else if viewok OKind.FOPEN == {
        "    ; OP_FOPEN\n"coms
        "rsi" compile_pop         // mode (0 = read, 1 = write, etc.)
        "rdi" compile_pop         // filename pointer
        "    mov     rax, 2\n"coms
        "    cmp     rsi, 0\n"coms
        "    je      .frl_"coms viewod com "\n"coms
        "    cmp     rsi, 1\n"coms
        "    je      .fwl_"coms viewod com "\n"coms
        "    cmp     rsi, 2\n"coms
        "    je      .fal_"coms viewod com "\n"coms
        "    jmp     .ffl_"coms viewod com "\n"coms
        "    .frl_"coms viewod com ":\n"coms
        "    mov     rsi, 0\n"coms
        "    jmp     .fdl_"coms viewod com "\n"coms
        "    .fwl_"coms viewod com ":\n"coms
        "    mov     rsi, 577\n"coms
        "    jmp     .fdl_"coms viewod com "\n"coms
        "    .fal_"coms viewod com ":\n"coms
        "    mov     rsi, 1025\n"coms
        "    jmp     .fdl_"coms viewod com "\n"coms
        "    .fdl_"coms viewod com ":\n"coms
        "    mov     rdx, 420\n"coms
        "    syscall\n"coms
        "rax" compile_push        // push FD (or -1 on error)
        "    jmp     .fel_"coms viewod com "\n"coms
        "    .ffl_"coms viewod com ":\n"coms
        "    mov     rax, -1\n"coms
        "rax" compile_push
        "    .fel_"coms viewod com ":\n"coms
    }
    else if viewok OKind.FREAD == {
        "    ; OP_FREAD\n"coms
        "rdi" compile_pop           // file descriptor
        "rdx" compile_pop           // length
        "rsi" compile_pop           // buffer pointer
        "    mov     rax, 0\n"coms // sys_read
        "    syscall\n"coms
        "rax" compile_push          // bytes read or -1
    }
    else if viewok OKind.FWRITE == {
        "    ; OP_FWRITE\n"coms
        "rdi" compile_pop           // file descriptor
        "rdx" compile_pop           // length
        "rsi" compile_pop           // buffer pointer
        "    mov     rax, 1\n"coms // sys_write
        "    syscall\n"coms
        "rax" compile_push          // bytes written or -1
    }
    else if viewok OKind.FCLOSE == {
        "    ; OP_FCLOSE\n"coms
        "rdi" compile_pop           // file descriptor
        "    mov     rax, 3\n"coms // sys_close
        "    syscall\n"coms
        "rax" compile_push          // return 0 or -1
    }
    else {
        "ERROR: Invalid opcode of type "eputs viewok eput '\n'eputc
        1 exit
    }
    %Op+
}

// op_ptr --
:compile_ops {
    while viewok { compile_op }
    drop
}

// char -- bool
:should_print_char {
    dup is_print
    swap (dup ('\\' !=) swap ('"' !=) &) &
    USE_ASM_STRINGS &
}

// init --
:compile_buf_str {
    $char is_quote: {false}
    while dup@c {
        if dup@c should_print_char {
            if is_quote not {
                "\""coms
                true =is_quote
            }
            dup@c comc
        } else {
            if is_quote {
                "\","coms
                false =is_quote
            }
            dup@c com
            ","coms
        }
        1+
    } drop

    if is_quote {
        "\","coms
    }
    "0\n" coms
}

:compile_inline_bufs {
    "    ; Inline Buffers\n"coms
    // -- idx
    0 while dup &inline_bufs stack_len < {
        "    b_"coms dup MAP_SIZE+ com " db "coms
        dup &inline_bufs %ptr stack_get@ compile_buf_str
        1+
    } drop
}

// idx --
:compile_buf_data {
    $int buf_size: {dup BUF_MAP map_idx->Buffer.size@}

    "    ; "coms dup BUF_MAP map_idx->Buffer.key.name@ coms "\n"coms
    "    b_"coms dup com

    if dup BUF_MAP map_idx->Buffer.init_int@c {
        if buf_size 1 == {
            " db "coms BUF_MAP map_idx->Buffer.init@ com "\n"coms
        } else if buf_size 8 == {
            " dq "coms BUF_MAP map_idx->Buffer.init@ com "\n"coms
        }
    } else {
        " db "coms
        dup BUF_MAP map_idx->Buffer.init@ compile_buf_str
        if (dup BUF_MAP map_idx->Buffer.init@ str_len 1+) (buf_size) < {
            "        times "coms buf_size com " - ($ - b_"coms dup com ") db 0\n"coms
        }
        drop
    }
}

// idx --
:compile_buf_bss {
    "    b_"coms dup com " resb "coms BUF_MAP map_idx->Buffer.size@ com
    " ; "coms dup BUF_MAP map_idx->Buffer.key.name@ coms "\n"coms
}

// idx -- bool
:is_valid_static_buffer {
    BUF_MAP map_idx
    dup->Buffer.key.name@ flag
    swap->Buffer.is_static@c
    &
}

:compile_program {
    "BITS 64\n"coms
    "global _start\n"coms
    "section .text\n"coms
    compile_functions

    "; start\n"coms
    "_start:\n"coms
    "    lea     "coms &stack_reg_str coms ", [b_stack + "coms &stack_size_str coms "]\n"coms
    "    lea     rdi, [rsp + 8]\n"coms
    "rdi" compile_push
    "    mov     rdi, [rsp]\n"coms
    "rdi" compile_push
    &start_ops_mem->StackHead.data compile_ops

    "section .data\n"coms

    // -- idx
    0 while dup MAP_SIZE < {
        if dup dup (is_valid_static_buffer) swap (BUF_MAP map_idx->Buffer.init@ flag) & {
            dup compile_buf_data
        }
        1+
    } drop
    compile_inline_bufs

    "section .bss\n"coms
    // -- idx
    0 while dup MAP_SIZE < {
        if dup dup (is_valid_static_buffer) swap (BUF_MAP map_idx->Buffer.init@ not) & {
            dup compile_buf_bss
        }
        1+
    } drop
    "    b_stack: resb "coms &stack_size_str coms " ; Stack Pointer\n" coms
}