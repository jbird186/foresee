#include "src/types.4c"

// Misc / Special
#OP_EOF{ 0 }
#OP_NOOP{ 1 }
#OP_EXIT{ 2 }    // exit_code --
// Functions
#OP_CALL{ 3 }
#OP_PUSH_FN{ 4 }
#OP_CALL_FN{ 5 }
#OP_RET{ 6 }
// Stack Primitives
#OP_DROP{ 7 }    // item --
#OP_PICK{ 8 }    // n -- item
#OP_ROLL{ 9 }    // n -- item
#OP_DEPTH{ 10 }   // -- depth
#OP_PUSH_INT{ 11 }
// Reference Primitives
#OP_PUSH_BUF{ 12 }
#OP_STORE{ 13 }   // item ptr --
#OP_FETCH{ 14 }   // ptr -- item
// Binary Operations
#OP_ADD{ 15 }
#OP_SUB{ 16 }
#OP_MUL{ 17 }
#OP_DIV{ 18 }
#OP_AND{ 19 }
#OP_OR{ 20 }
#OP_XOR{ 21 }
#OP_SHL{ 22 }
#OP_SHR{ 23 }
#OP_SAR{ 24 }
#OP_NOT{ 25 }
#OP_EQ{ 26 }
#OP_GT{ 27 }
#OP_LT{ 28 }
// Branching
#OP_LABEL{ 29 }
#OP_JMP{ 30 }
#OP_JZ{ 31 }      // value --
// I/O
#OP_FOPEN{ 32 }   // filename_ptr [0=read, 1=write, 2=append] -- [fd, -1]
#OP_FREAD{ 33 }   // ptr len fd -- [bytes_read, -1]
#OP_FWRITE{ 34 }  // ptr len fd -- [bytes_written, -1]
#OP_FCLOSE{ 35 }  // fd -- [0, -1]

// data kind ref --
:op_push {
    // -- data kind ptr
    %Op stack_push
    swap over->Op.kind!
    ->Op.data!
}

:viewok { dup->Op.kind@c }
:viewod { dup->Op.data@ }