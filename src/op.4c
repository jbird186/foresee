#use "types.4c"

pub enum OKind {
    // Misc / Special
    EOF
    NOOP
    // Functions
    CALL
    PUSH_FN
    CALL_FN
    RET
    // Stack Primitives
    PUSH_INT
    DROP    // a --
    PICK    // n -- item
    ROLL    // n -- item
    DUP     // a -- a a
    OVER    // a b -- a b a
    SWAP    // a b -- b a
    ROT     // a b c -- b c a
    NIP     // a b -- b
    DEPTH   // -- depth
    // Reference Primitives
    PUSH_BUF
    STORE   // item &ptr --
    FETCH   // &ptr -- item
    MEMCPY  // &src &dest length --
    // Allocation
    PUSH_VAR
    ALLOC
    // Binary Operations
    ADD
    SUB
    MUL
    AND
    OR
    XOR
    SHL
    SHR
    SAR
    NOT
    EQ
    GT
    LT
    DIVMOD  // a b -- (a / b) (a % b)
    // Branching
    LABEL
    JMP
    JZ      // value --
    // Syscalls
    EXIT    // exit_code --
    FOPEN   // &filename_ptr [0=read, 1=write, 2=append] -- [fd, -1]
    FREAD   // &ptr len fd -- [bytes_read, -1]
    FWRITE  // &ptr len fd -- [bytes_written, -1]
    FCLOSE  // fd -- [0, -1]
    GETCWD  // &ptr len -- [bytes_written, -err]
    // Linux Only
    LIN_syscall // arg1 arg2 arg3 arg4 arg5 arg6 n -- result
    // Windows Only
    WIN_GetCommandLineW // -- &ptr
    WIN_CommandLineToArgvW // &src &argc_ptr -- [&argv_ptr, -1]
    WIN_WideCharToMultiByte // &src &dest [len, 0=strlen] -- [size, -1];
    WIN_LocalAlloc // size -- [&ptr, -1]
    WIN_LocalFree // &ptr -- [0, -err]
    WIN_GetStdHandle // n -- [fd, -1]
}

// data kind ref --
pub :op_push {
    // -- data kind ptr
    var &Op entry: {%Op stack_push}
    =entry->kind
    =entry->data
}

pub :viewok { dup as Op.kind@c }
pub :viewod { dup as Op.data@ }