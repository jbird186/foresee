#use "types.4c"
#use "stack.4c"

pub enum TKind {
    EOF
    INT
    CHAR
    STR
    IDENT
    WORD
    FN
    STATIC
    IF
    ELSE
    WHILE
    FOR
    CONTINUE
    BREAK
    COLON
    POUND
    COMMA
    DOLLAR
    REF
    EQ
    ENUM
    STRUCT
    ARROW
    FIELD
    SIZE
    CALL
    PUB
    PAREN_START
    PAREN_END
    BRACE_START
    BRACE_END
    BRACKET_START
    BRACKET_END
    FILE_START
    FILE_END
}

// data kind file line ref --
:pub tok_push {
    // -- data kind file line ptr
    %Token stack_push
    swap over->Token.line!
    swap over->Token.file!
    swap over->Token.kind!c
    ->Token.data!
}

// src dest --
:pub tok_push_clone {
    // -- src ptr
    %Token stack_push
    over->Token.kind@c over->Token.kind!c
    over->Token.data@ over->Token.data!
    over->Token.file@ over->Token.file!
    swap->Token.line@ swap->Token.line!
}

:pub viewtk { dup->Token.kind@c }
:pub viewtd { dup->Token.data@ }
:pub viewtf { dup->Token.file@ }
:pub viewtl { dup->Token.line@ }

// tok_ptr -- tok_ptr
:pub error {
    viewtf puts ":"puts viewtl put ": ERROR: "puts
}

#macro skip_delim(start, end) {(
    $ptr original_tok_ptr: {dup}
    // -- depth tok_ptr
    1 swap while %Token+ over {
        if viewtk not {
            original_tok_ptr error
            "Expected token of type "puts TKind.end put
            " after token of type "puts viewtk put
            "\n"puts
            1 exit
        }
        if viewtk TKind.start == {
            swap 1+ swap
        } else if viewtk TKind.end == {
            swap 1- swap
        }
    }
    // -- tok_ptr
    nip
)}

// tok_ptr -- new_tok_ptr
:pub skip_braces {
    skip_delim(BRACE_START, BRACE_END)
}

// tok_ptr -- new_tok_ptr
:pub skip_paren {
    skip_delim(PAREN_START, PAREN_END)
}

// tok_ptr -- new_tok_ptr
:pub skip_brackets {
    skip_delim(BRACKET_START, BRACKET_END)
}

// tok_ptr -- tok_ptr
#pub macro skip_until(until_tok_kind) {(
    dup
    while viewtk until_tok_kind != {
        if viewtk not {
            swap error
            "Expected token of type "puts until_tok_kind put
            " after token of type "puts viewtk put
            "\n"puts
            1 exit
        }
        else if viewtk TKind.PAREN_START == { skip_paren }
        else if viewtk TKind.BRACE_START == { skip_braces }
        else if viewtk TKind.BRACKET_START == { skip_brackets }
        else { %Token+ }
    }
    nip
    %Token+
)}