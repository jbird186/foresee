#use "platform.4c"

pub static int argc
pub static ptr argv

// idx -- &ptr
pub :get_argv {
    %ptr* argv+ @
}

:put_example {
    "Example:\n"puts
    "\t"puts 0 get_argv puts " ./src/main.4c ./target/output.asm x86_64-linux-nasm -Istd -O\n"puts
}

:put_options {
    "Options:\n"puts
    "\t-I<dir>    \t\tallow files from `dir` to be included during compilation\n"puts
    "\t-d, --debug\t\tcompile with debug information\n"puts
    "\t-O, --optimize\t\tenable optimizations\n"puts
}

:parse_platform {
    var ptr arch: {3 get_argv}
    var ptr os
    var ptr tool

    arch '-' strchr
    if dup not {
        "ERROR: Invalid target '"puts 3 get_argv puts "', expected <architecture>-<OS>-<toolchain>\n"puts
        put_example
        1 exit
    }
    0 over!c 1+ =os

    os '-' strchr
    if dup not {
        "ERROR: Invalid target '"puts 3 get_argv puts "', expected <architecture>-<OS>-<toolchain>\n"puts
        put_example
        1 exit
    }
    0 over!c 1+ =tool

    if (arch "x86_64" strcmp not) (arch "x64" strcmp not) | {
        "ARCH_X86_64" define_builtin_flag
    } else if arch "aarch64" strcmp not {
        "ARCH_AARCH64" define_builtin_flag
    } else {
        "ERROR: Unsupported architecture '"puts arch puts "'\n"puts
        1 exit
    }

    if os "linux" strcmp not {
        "OS_LINUX" define_builtin_flag
    } else if os "windows" strcmp not {
        "OS_WINDOWS" define_builtin_flag
    } else {
        "ERROR: Unsupported OS '"puts os puts "'\n"puts
        1 exit
    }

    if tool "nasm" strcmp not {
        "TOOLCHAIN_NASM" define_builtin_flag
    } else if tool "fasm" strcmp not {
        "TOOLCHAIN_FASM" define_builtin_flag
    } else if tool "gcc" strcmp not {
        "TOOLCHAIN_GCC" define_builtin_flag
    } else {
        "ERROR: Unsupported toolchain '"puts tool puts "'\n"puts
        1 exit
    }
}

#macro set_compiler_flag(variable, name) {
    if variable {
        "ERROR: flag '"puts name puts "' already set\n"puts
        1 exit
    }
    true =variable
}

// &arg_ptr --
:parse_switches {
    while %char+ dup@c {
        if dup@c 'd' == {
            set_compiler_flag(debug_mode, "debug")
        } else if dup@c 'O' == {
            set_compiler_flag(optimize_mode, "optimize")
        } else {
            "ERROR: Unrecognized switch '-"puts dup@c putc "'\n"puts
            put_options
            1 exit
        }
    }
    drop
}

// &arg_ptr --
:parse_include_option {
    var ptr arg: {2+}
    var ptr path: {STRS_MEM stack_top}

    if arg@c '/' != {
        var int cwd_res: {path 4096 getcwd}
        if cwd_res is_failure {
            "ERROR: Failed to obtain current working directory\n"puts
            1 exit
        }

        if arg "./" 2 strncmp not { 2 +=arg }
        &strs_mem@ cwd_res+ 1- &strs_mem!
        '/' STRS_MEM stack_push!c
    }

    arg STRS_MEM stack_top strcpy
    &strs_mem@ arg strlen+ &strs_mem!
    if STRS_MEM stack_last@c '/' != {
        '/' STRS_MEM stack_push!c
    }
    0 STRS_MEM stack_push!c

    path DIRS_MEM stack_push!
}

// idx -- new_idx
:parse_option {
    var int idx: {}
    var ptr arg: {idx get_argv}

    if arg "-I" 2 strncmp not {
        arg parse_include_option
    } else if (arg@c '-' ==) (arg "--" 2 strncmp flag) & {
        arg parse_switches
    } else if arg "--debug" strcmp not {
        set_compiler_flag(debug_mode, "debug")
    } else if arg "--optimize" strcmp not {
        set_compiler_flag(optimize_mode, "optimize")
    } else {
        "ERROR: Unrecognized option '"puts arg puts "'\n"puts
        put_options
        1 exit
    }
    idx 1+
}

// -- &src_file
pub :get_src_file {
    1 get_argv
}

// -- &out_file
pub :get_out_file {
    2 get_argv
}

// &argv argc --
pub :parse_args {
    =argc =argv
    if argc 4 < {
        "Usage: "puts 0 get_argv puts " <source_file> <output_file> <platform> [options]\n"puts
        put_example
        put_options
        1 exit
    }
    parse_platform
    4 while dup argc < { parse_option } drop

    get_src_file add_file_dir
}