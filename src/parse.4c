#use "std/stdstr.4c"
#use "src/config.4c"
#use "src/token.4c"
#use "src/op.4c"

$static int ASM_LABEL_ID
$static int ASM_ROLL_ID
$static int ASM_FOPEN_ID

:parse_tok

// ops_dest tok_ptr -- ops_dest tok_ptr
#_parse_until(until_tok_kind) {
    while viewtk until_tok_kind != {
        over swap parse_tok
    }
    %Token+
}

#define_intrinsic_opcode(data op_code alias) {
    if viewtd alias str_eq {
        // -- tok_ptr
        (data) op_code 3 roll op_push
        %Token+
        return
    }
}

// name -- name [idx, -1]
:scoped_buf_idx {
    $static int scope_idx
    &scope_stack stack_len =scope_idx

    while &scope_idx@-- {
        // -- name
        if dup scope_idx SCOPE_STACK stack_get@ BUF_MAP scoped_map_contains {
            dup scope_idx SCOPE_STACK stack_get@ BUF_MAP scoped_map_get_idx
            return
        }
    }
    -1
}

// ops_dest tok_ptr -- ops_dest new_tok_ptr field_size offset
:view_arrow {
    %Token+
    if viewtk TKind.IDENT != {
        error "Invalid struct name after '->'\n"eputs
        1 exit
    }
    $static ptr struct_name
    viewtd=struct_name

    // -- ops_dest tok_ptr fields_ptr
    if struct_name STRUCT_MAP map_get dup slot_is_empty {
        drop
        error "Unrecognized struct '"eputs struct_name eputs "'\n"eputs
        1 exit
    }
    ->Struct.fields@

    // -- ops_dest fields_ptr tok_ptr
    swap %Token+
    if viewtk TKind.FIELD != {
        error "Expected field access after '->"eputs struct_name eputs "'\n"eputs
        1 exit
    }

    // -- ops_dest tok_ptr field_name fields_ptr
    viewtd rot
    $static int sum
    0=sum
    while dup->StructField.name@ {
        if over over->StructField.name@ str_eq {
            // -- ops_dest tok_ptr field_size
            ->StructField.size@ nip
            swap %Token+ swap
            sum return
        }
        dup->StructField.size@ sum + =sum
        %StructField+
    }

    drop
    swap error "Field '"eputs swap eputs "' not found for struct '"eputs struct_name eputs "'\n"eputs
    1 exit
}

// ops_dest tok_ptr -- ops_dest tok_ptr
#_view_arrows {
    %Token+
    idx BUF_MAP map_idx->Buffer.size@ =size
    idx OKind.PUSH_BUF 3 pick op_push

    while viewtk TKind.ARROW == {
        // -- ops_dest new_tok_ptr field_size offset
        view_arrow
        OKind.PUSH_INT 4 pick op_push
        0 OKind.ADD 4 pick op_push
        // -- ops_dest new_tok_ptr
        =size
    }
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_string {
    viewtd &inline_bufs %ptr stack_push!
    // -- tok_ptr
    &inline_bufs stack_len 1- MAP_SIZE+ OKind.PUSH_BUF 3 roll op_push
    %Token+
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_ident {
    ////////// Intrinsics //////////
    // Misc / Special
    define_intrinsic_opcode(0 {OKind.NOOP} "__OP_NOOP")
    define_intrinsic_opcode(0 {OKind.EXIT} "__OP_EXIT")
    // Functions
    define_intrinsic_opcode(0 {OKind.RET} "__OP_RET")
    // Stack Primitives
    define_intrinsic_opcode(0 {OKind.DROP} "__OP_DROP")
    define_intrinsic_opcode(0 {OKind.PICK} "__OP_PICK")
    define_intrinsic_opcode({ASM_ROLL_ID dup 2+ &ASM_ROLL_ID!} {OKind.ROLL} "__OP_ROLL")
    define_intrinsic_opcode(0 {OKind.DEPTH} "__OP_DEPTH")
    // Reference Primitives
    define_intrinsic_opcode(0 {OKind.STORE} "__OP_STORE")
    define_intrinsic_opcode(0 {OKind.FETCH} "__OP_FETCH")
    // Binary Operations
    define_intrinsic_opcode(0 {OKind.ADD} "__OP_ADD")
    define_intrinsic_opcode(0 {OKind.SUB} "__OP_SUB")
    define_intrinsic_opcode(0 {OKind.MUL} "__OP_MUL")
    define_intrinsic_opcode(0 {OKind.DIV} "__OP_DIV")
    define_intrinsic_opcode(0 {OKind.AND} "__OP_AND")
    define_intrinsic_opcode(0 {OKind.OR} "__OP_OR")
    define_intrinsic_opcode(0 {OKind.XOR} "__OP_XOR")
    define_intrinsic_opcode(0 {OKind.SHL} "__OP_SHL")
    define_intrinsic_opcode(0 {OKind.SHR} "__OP_SHR")
    define_intrinsic_opcode(0 {OKind.SAR} "__OP_SAR")
    define_intrinsic_opcode(0 {OKind.NOT} "__OP_NOT")
    define_intrinsic_opcode(0 {OKind.EQ} "__OP_EQ")
    define_intrinsic_opcode(0 {OKind.GT} "__OP_GT")
    define_intrinsic_opcode(0 {OKind.LT} "__OP_LT")
    // I/O
    define_intrinsic_opcode({&ASM_FOPEN_ID@++} {OKind.FOPEN} "__OP_FOPEN")
    define_intrinsic_opcode(0 {OKind.FREAD} "__OP_FREAD")
    define_intrinsic_opcode(0 {OKind.FWRITE} "__OP_FWRITE")
    define_intrinsic_opcode(0 {OKind.FCLOSE} "__OP_FCLOSE")

    ////////// Functions //////////
    if viewtd FN_MAP map_contains {
        viewtd FN_MAP map_get_idx OKind.CALL_FN 3 roll op_push
        %Token+
        return
    }
    $static int name

    ////////// Enums //////////
    if viewtd ENUM_MAP map_contains {
        viewtd =name

        // -- ops_dest tok_ptr variants
        name ENUM_MAP map_get->Enum.variants@
        // -- ops_dest variants tok_ptr
        swap %Token+
        if viewtk TKind.FIELD != {
            error "Expected variant after '"eputs name eputs "'\n"eputs
            1 exit
        }
        // -- ops_dest tok_ptr name variants
        viewtd rot
        while dup->EnumVariant.name@ {
            if over over->EnumVariant.name@ str_eq {
                nip->EnumVariant.value@ OKind.PUSH_INT 3 roll op_push
                %Token+
                return
            }
            %EnumVariant+
        }
        drop
        error "Field '"eputs eputs "' not found for enum '"eputs name eputs "'\n"eputs
    }

    ////////// Buffers //////////
    $static int idx
    $static int size

    viewtd scoped_buf_idx =idx =name
    if idx is_failure {
        error "Buffer '"eputs name eputs "' not defined\n"eputs
        1 exit
    }

    _view_arrows
    if size 8 == {
        0 OKind.FETCH 3 roll op_push
    } else if size 1 == {
        if "fetchc" FN_MAP map_contains not {
            error "Function 'fetchc' not defined\n"eputs
            1 exit
        }
        "fetchc" FN_MAP map_get_idx OKind.CALL_FN 3 roll op_push
    } else {
        error "Buffer '"eputs name eputs "' cannot be automatically read from\n"eputs
        1 exit
    }
}

// ops_dest tok_ptr if_id -- new_tok_ptr
:_parse_if_with_id {
    // -- ops_dest tok_ptr if_id else_id
    &ASM_LABEL_ID@++
    // -- if_id else_id ops_dest tok_ptr
    3 roll 3 roll
    %Token+
    // Condition
    _parse_until({TKind.BRACE_START})
    // -- if_id else_id ops_dest tok_ptr
    2 pick OKind.JZ 3 pick op_push

    // Operations
    dup SCOPE_STACK stack_push!
    _parse_until({TKind.BRACE_END})
    &scope_stack stack_shrink

    // -- if_id else_id ops_dest tok_ptr
    3 pick OKind.JMP 3 pick op_push
    2 pick OKind.LABEL 3 pick op_push
    // -- if_id ops_dest tok_ptr
    rot drop

    // No else condition
    if viewtk TKind.ELSE != {
        // tok_ptr
        nip nip
        return
    }
    %Token+

    // Else condition
    // -- if_id ops_dest tok_ptr
    if viewtk TKind.BRACE_START == {
        %Token+
        dup SCOPE_STACK stack_push!
        _parse_until({TKind.BRACE_END})
        &scope_stack stack_shrink
        nip nip
    } else if viewtk TKind.IF == {
        // -- tok_ptr
        rot _parse_if_with_id
    } else {
        error "Invalid 'if' condition\n"eputs
        1 exit
    }
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_if {
    // -- ops_dest if_id tok_ptr
    &ASM_LABEL_ID@++ swap
    // -- ops_dest if_id tok_ptr
    2 pick swap 2 pick _parse_if_with_id
    // -- tok_ptr
    swap OKind.LABEL 3 roll op_push
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_while {
    %Token+

    // -- ops_dest tok_ptr start_id end_id
    &ASM_LABEL_ID@++ &ASM_LABEL_ID@++
    // -- start_id end_id ops_dest tok_ptr
    3 roll 3 roll
    // -- start_id end_id ops_dest tok_ptr
    3 pick OKind.LABEL 3 pick op_push

    // Condition
    _parse_until({TKind.BRACE_START})
    2 pick OKind.JZ 3 pick op_push

    // Operations
    dup SCOPE_STACK stack_push!
    _parse_until({TKind.BRACE_END})
    &scope_stack stack_shrink

    // -- end_id ops_dest tok_ptr
    3 roll OKind.JMP 3 pick op_push
    // -- tok_ptr
    rot OKind.LABEL 3 roll op_push
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_fn {
    if viewtd FN_MAP map_get->Function.def@ {
        error "Function '"eputs viewtd eputs "' already defined\n"eputs
        1 exit
    }

    // -- tok_ptr
    if swap {
        error "Function '"eputs viewtd eputs "' must be defined in global scope\n"eputs
        1 exit
    }

    // -- name tok_ptr
    viewtd swap %Token+
    // Function prototype
    if viewtk TKind.BRACE_START != {
        swap dup FN_MAP map_get->Function.name!
        return
    }
    dup SCOPE_STACK stack_push!

    // -- name tok_ptr fn_ptr
    &fn_ops_mem %Op stack_top
    // -- tok_ptr fn_ptr name slot_ptr
    rot dup FN_MAP map_get
    // -- tok_ptr
    swap over ->Function.name! ->Function.def!
    %Token+

    while viewtk TKind.BRACE_END != {
        &fn_ops_mem swap parse_tok
    }
    %Token+

    if &fn_ops_mem %Op stack_last->Token.kind@c OKind.RET != {
        0 OKind.RET &fn_ops_mem op_push
    }

    0 OKind.EOF &fn_ops_mem op_push
    &scope_stack stack_shrink
}

:view_buf_size

// base tok_ptr -- total tok_ptr
:view_buf_size_scalar {
    while viewtk TKind.BRACKET_START == {
        // -- total tok_ptr scalar
        %Token+ view_buf_size
        // -- total tok_ptr
        rot * swap
        if viewtk TKind.BRACKET_END != {
            error "Invalid buffer size\n"eputs
            1 exit
        }
        %Token+
    }
}

// tok_ptr -- new_tok_ptr size
:view_type_size {
    if viewtd STRUCT_MAP map_get dup slot_is_empty {
        drop
        error "Type '"eputs viewtd eputs "' not found\n"eputs
        1 exit
    }
    ->Struct.fields@

    // -- tok_ptr sum fields
    0 swap while dup@ {
        8+ dup@ rot + swap
        8+
    }
    drop
}

// tok_ptr -- new_tok_ptr int
:view_buf_size_int {
    if viewtk TKind.INT == {
        // -- base tok_ptr
        viewtd swap %Token+
        view_buf_size_scalar
    } else if viewtk TKind.IDENT == {
        // -- sum tok_ptr
        view_type_size swap %Token+
        view_buf_size_scalar
    } else {
        // -- value tok_ptr
        %Token+ view_buf_size swap
        if viewtk TKind.BRACKET_END != {
            error "Invalid buffer size\n"eputs
            1 exit
        }
        %Token+
    }

    if over 0 < {
		error "Invalid buffer size\n"eputs
		1 exit
	}
    swap
}

// tok_ptr -- bool
:tok_is_type {
    if viewtk TKind.IDENT != {
        drop false return
    }
    ->Token.data@ STRUCT_MAP map_contains
}

// tok_ptr -- new_tok_ptr size
:view_buf_size {
	// -- sum tok_ptr
	0 swap while (viewtk TKind.INT ==) (over tok_is_type) | {
		view_buf_size_int rot + swap
	}

    if over 0 < {
		error "Invalid buffer size\n"eputs
		1 exit
	}
    swap
}


// ops_dest tok_ptr -- new_tok_ptr
:parse_dollar {
    // -- tok_ptr
    nip

    %Token+
    if viewtk TKind.STATIC != {
        if viewtk TKind.IDENT == {
            error "Buffer '"eputs viewtd eputs "' must be static\n"eputs
        } else if %Token+ viewtk TKind.IDENT == {
            error "Buffer '"eputs viewtd eputs "' must be static\n"eputs
        } else {
            error "Invalid buffer name\n"eputs
        }
        1 exit
    }

    %Token+
    $static int size
    if (viewtk TKind.INT ==) (over tok_is_type) | {
        view_buf_size =size
    } else {
        -1 =size
    }

    $static ptr name
    if viewtk TKind.IDENT != {
        error "Invalid buffer name\n"eputs
        1 exit
    } else if viewtd SCOPE_STACK stack_last@ BUF_MAP scoped_map_contains {
        error "Buffer '"eputs viewtd eputs "' already defined\n"eputs
        1 exit
    }
    viewtd =name
    %Token+
    $static ptr init
    $static char init_int
    if viewtk TKind.COLON == {
        %Token+
        if viewtk TKind.STR == {
            // -- tok_ptr str_size
            viewtd str_len 1+
            if size 0 < {
                =size
            } else if size > {
                error "Invalid size for buffer '"eputs name eputs "'\n"eputs
                1 exit
            }
            false =init_int
        } else if viewtk TKind.INT == {
            if size 0 < {
                8 =size
            } else {
                if size 8 == {}
                else if (viewtd dup (0xff <=) swap (0 >=) &) (size 1 ==) & {}
                else {
                    error "Invalid size for buffer '"eputs name eputs "'\n"eputs
                    1 exit
                }
            }
            true =init_int
        } else if viewtk TKind.CHAR == {
            if size 0 < {
                1 =size
            } else {
                if (size 8 !=) (size 1 !=) & {
                    error "Invalid size for buffer '"eputs name eputs "'\n"eputs
                    1 exit
                }
            }
            true =init_int
        } else {
            error "Invalid initialization value for buffer '"eputs name eputs "'\n"eputs
            1 exit
        }
        viewtd =init
        %Token+
    } else {
        0 =init
        if size 0 < {
            error "Invalid definition for buffer '"eputs name eputs "'\n"eputs
            1 exit
        }
        false =init_int
    }

    if size BUFFER_SIZE_LIMIT > {
        error "Buffer '"eputs name eputs "' too cannot exceed "eputs BUFFER_SIZE_LIMIT eput " bytes\n"eputs
        1 exit
    }

    // -- tok_ptr
    name SCOPE_STACK stack_last@ BUF_MAP scoped_map_get
    name over->Buffer.key->ScopedKey.name!
    SCOPE_STACK stack_last@ over->Buffer.key->ScopedKey.scope!
    size over->Buffer.size!
    init over->Buffer.init!
    init_int swap->Buffer.init_int!c
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_ref {
    // -- ops_dest tok_ptr
    if viewtd FN_MAP map_contains {
        viewtd FN_MAP map_get_idx OKind.PUSH_FN 3 roll op_push
        %Token+
        return
    }

    // -- ops_dest tok_ptr name idx
    viewtd scoped_buf_idx
    if dup is_success {
        // -- tok_ptr name
        OKind.PUSH_BUF 4 roll op_push
        drop %Token+
    } else {
        drop drop
        error "Buffer '"eputs over eputs "' not defined in this scope\n"eputs
        1 exit
    }
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_eq {
    $static int idx
    $static int name
    $static int size

    viewtd scoped_buf_idx =idx =name
    if idx is_failure {
        error "Buffer '"eputs name eputs "' not defined in this scope\n"eputs
        1 exit
    }

    _view_arrows
    if size 8 == {
        0 OKind.STORE 3 roll op_push
    } else if size 1 == {
        if "storec" FN_MAP map_contains not {
            error "Function 'storec' not defined\n"eputs
            1 exit
        }
        "storec" FN_MAP map_get_idx OKind.CALL_FN 3 roll op_push
    } else {
        error "Buffer '"eputs name eputs "' cannot be automatically assigned to\n"eputs
        1 exit
    }
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_enum {
    %Token+
    if viewtk TKind.IDENT != {
        error "Invalid enum name\n"eputs
        1 exit
    }
    // -- tok_ptr
    if swap {
        error "Enum '"eputs viewtd eputs "' must be defined in global scope\n"eputs
        1 exit
    }

    $static ptr name
    viewtd =name
    $static ptr variants_ptr
    ENUM_MEM stack_top =variants_ptr

    %Token+
    if viewtk TKind.BRACE_START != {
        error "Invalid enum definition\n"eputs
        1 exit
    }

    %Token+
    while viewtk TKind.BRACE_END != {
        if viewtk TKind.IDENT != {
            error "Invalid definition for enum '"eputs name eputs "'\n"eputs
            1 exit
        }

        // -- name tok_ptr
        viewtd swap %Token+
        if viewtk TKind.COLON == {
            %Token+
            if viewtk TKind.INT != {
                error "Invalid value for enum variant '"eputs over eputs "'\n"eputs
                1 exit
            }
            // -- name tok_ptr value
            viewtd
            if ENUM_MEM stack_last->EnumVariant.name@ {
                if dup ENUM_MEM stack_last->EnumVariant.value@ <= {
                    drop
                    error "Enum '"eputs name eputs "' must have values in ascending order\n"eputs
                    1 exit
                }
            }
            swap %Token+ swap
        } else {
            if ENUM_MEM stack_last->EnumVariant.name@ {
                ENUM_MEM stack_last->EnumVariant.value@ 1+
            } else { 0 }
            // -- name tok_ptr value
        }
        // -- tok_ptr value name slot_ptr
        rot ENUM_MEM stack_push
        swap over->EnumVariant.name! ->EnumVariant.value!
    }
    %Token+
    NULL ENUM_MEM stack_push->EnumVariant.name!

    // -- tok_ptr slot_ptr
    name ENUM_MAP map_get
    name over->Enum.name!
    variants_ptr swap->Enum.variants!
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_struct {
    %Token+
    if viewtk TKind.IDENT != {
        error "Invalid struct name\n"eputs
        1 exit
    }
    // -- tok_ptr
    if swap {
        error "Struct '"eputs viewtd eputs "' must be defined in global scope\n"eputs
        1 exit
    }

    $static ptr name
    viewtd =name
    $static ptr fields_ptr
    STRUCT_MEM stack_top =fields_ptr

    %Token+
    if viewtk TKind.BRACE_START != {
        error "Invalid struct definition\n"eputs
        1 exit
    }

    %Token+
    while viewtk TKind.BRACE_END != {
        // -- tok_ptr size
        view_buf_size_int
        if over->Token.kind@c TKind.IDENT != {
            drop
            error "Invalid definition for struct '"eputs name eputs "'\n"eputs
            1 exit
        }
        // -- tok_ptr size name slot_ptr
        over->Token.data@ STRUCT_MEM stack_push
        swap over->StructField.name! ->StructField.size!
        %Token+
    }
    %Token+
    NULL STRUCT_MEM stack_push->StructField.name!

    // -- tok_ptr slot_ptr
    name STRUCT_MAP map_get
    name over->Struct.name!
    fields_ptr swap->Struct.fields!
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_arrow {
    view_arrow nip OKind.PUSH_INT 3 pick op_push
    0 OKind.ADD 3 roll op_push
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_size {
    if viewtd STRUCT_MAP map_contains {
        view_type_size
    // -- ops_dest tok_ptr idx
    } else if viewtd scoped_buf_idx nip dup is_success {
        BUF_MAP map_idx
    } else {
        drop
        error "Buffer '"eputs viewtd eputs "' not defined\n"eputs
        1 exit
    }
    OKind.PUSH_INT 3 roll op_push
    %Token+
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_call {
    0 OKind.CALL 3 roll op_push
    %Token+
}

#parse_with(parse_kind parse_function) {
    else if viewtk parse_kind == {
        parse_function
    }
}

// ops_dest tok_ptr -- new_tok_ptr
:parse_tok {
    if viewtk TKind.POUND == {
        error "Unexpected preprocessing directive\n"eputs
        1 exit
    }
    else if viewtk TKind.WORD == {
        error "Macro '"eputs viewtd eputs "' not defined\n"eputs
        1 exit
    }
    else if viewtk dup (TKind.INT ==) swap (TKind.CHAR ==) | {
        viewtd OKind.PUSH_INT 3 roll op_push
        %Token+
    }
    else if viewtk TKind.PAREN_START == {
        %Token+
        _parse_until({TKind.PAREN_END})
        nip
    }
    parse_with({TKind.STR} parse_string)
    parse_with({TKind.IDENT} parse_ident)
    parse_with({TKind.IF} parse_if)
    parse_with({TKind.WHILE} parse_while)
    parse_with({TKind.FN} parse_fn)
    parse_with({TKind.DOLLAR} parse_dollar)
    parse_with({TKind.REF} parse_ref)
    parse_with({TKind.EQ} parse_eq)
    parse_with({TKind.ENUM} parse_enum)
    parse_with({TKind.STRUCT} parse_struct)
    parse_with({TKind.ARROW} parse_arrow)
    parse_with({TKind.SIZE} parse_size)
    parse_with({TKind.CALL} parse_call)
    else {
        error "Unexpected token of type "eputs viewtk eput cr
        1 exit
    }
}

:parse_out_toks {
    $static char kind
    // -- tok_ptr
    &out_toks_mem->StackHead.data
    while viewtk =kind kind TKind.EOF != {
        if (kind TKind.FN !=) (kind TKind.DOLLAR !=) (kind TKind.ENUM !=) (kind TKind.STRUCT !=) & & & {
            error "Unexpected token of type "eputs viewtk eput " outside of 'main'\n"eputs
            1 exit
        }
        0 swap parse_tok
    }
    drop

    if "main" FN_MAP map_get slot_is_empty {
        error "Function 'main' not defined\n"eputs
        1 exit
    }
    "main" FN_MAP map_get_idx OKind.CALL_FN &start_ops_mem op_push
    0 OKind.PUSH_INT &start_ops_mem op_push
    0 OKind.EXIT &start_ops_mem op_push
    0 OKind.EOF &start_ops_mem op_push
}