#use "lex.4c"
#use "preprocess.4c"
#use "parse.4c"
#use "compile.4c"
#use "cli.4c"

:warn_memory_usage {
    if debug_mode not { return }

    #macro check_buf(buf, item_size, name) {
        if (&buf stack_len item_size* 4*) (%buf) > {
            "WARNING: "puts name puts " is more than 25% full\n"puts
        }
    }
    check_buf(strs_mem, %char, "strs_mem")
    check_buf(toks_mem, %Token, "toks_mem")
    check_buf(out_toks_mem, %Token, "out_toks_mem")
    check_buf(fn_ops_mem, %Op, "fn_ops_mem")
    check_buf(inline_bufs, %ptr, "inline_bufs")
    check_buf(enum_variants_mem, %EnumVariant, "enum_variants_mem")
    check_buf(struct_fields_mem, %StructField, "struct_fields_mem")
    check_buf(dims_mem, %int, "dims_mem")
    check_buf(dirs_mem, %ptr, "dirs_mem")
}

// &argv argc --
:main {
    parse_args
    $ptr src_file: {get_src_file}
    $ptr out_file: {get_out_file}

    0 SCOPE_STACK stack_push!

    $ptr src_fd: {src_file 0 fopen}
    if src_fd is_failure {
        "ERROR: File '"puts src_file puts "' not found\n"puts
        1 exit
    }

    &src_str SRC_STR_SIZE src_fd fread drop
    src_fd fclose drop
    &src_str src_file lex_src

    if "__core.4c" use_file is_failure {
        "ERROR: standard library not found\n"puts
        1 exit
    }

    preprocess_src
    parse_out_toks

    out_file 1 fopen =out_fd
    compile_program
    out_fd fclose drop

    warn_memory_usage
    if depth {
        "WARNING: Compilation completed with a stack depth of "puts depth put "\n"puts
    }
}