#use "src/lex.4c"
#use "src/preprocess.4c"
#use "src/parse.4c"
#use "src/compile.4c"

// TODO: "use" blocks
// TODO: simulation mode
// TODO: optimization

$static int argc
$static ptr argv

// idx -- ptr
:get_argv {
    %ptr* argv+ @
}

:eput_example {
    "Example:\n"eputs
    "\t"eputs 0 get_argv eputs " ./src/main.4c ./target/output.asm x86_64-linux"eputs
}

:parse_platform {
    $ptr arch: {3 get_argv}
    $ptr os

    arch '-' str_char
    if dup not {
        "ERROR: Invalid target '"eputs 3 get_argv eputs "'. Expected <architecture>-<OS>.\n"eputs
        eput_example
        1 exit
    }
    0 over!c 1+ =os

    if (arch "x86_64" str_eq) (arch "x64" str_eq) | {
        "ARCH_X86_64" define_builtin_flag
    } else {
        "ERROR: Unrecognized architecture '"eputs arch eputs "'\n"eputs
        1 exit
    }

    if os "linux" str_eq {
        "OS_LINUX" define_builtin_flag
    } else if os "windows" str_eq {
        "OS_WINDOWS" define_builtin_flag
    } else {
        "ERROR: Unrecognized OS '"eputs os eputs "'\n"eputs
        1 exit
    }
}

// argv argc --
:main {
    =argc =argv
    if argc 4 != {
        "Usage: "eputs 0 get_argv eputs " <source_file> <output_file> <platform>\n"eputs
        eput_example
        1 exit
    }
    parse_platform

    0 SCOPE_STACK stack_push!
    0 ALLOC_STACK stack_push!

    $ptr src_file_name: {1 get_argv}
    $ptr out_file_name: {2 get_argv}
    $ptr src_fd: {src_file_name 0 fopen}

    if src_fd is_failure {
        "ERROR: File '"eputs src_file_name eput sp src_file_name eputs "' not found\n"eputs
        1 exit
    }

    &src_str SRC_STR_SIZE src_fd fread drop
    src_fd fclose drop
    &src_str src_file_name lex_src
    preprocess_src
    parse_out_toks

    out_file_name 1 fopen =out_fd
    compile_program
    out_fd fclose drop
}