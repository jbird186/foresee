#use "compile/common.4c"
#use "stdstr.4c"
#use "stdchar.4c"
#use "config.4c"
#use "map.4c"
#use "op.4c"

$static int stack_ptr_delta
:com_stack_delta {
    if stack_ptr_delta 0 > {
        " + "coms stack_ptr_delta com
    } else if stack_ptr_delta 0 < {
        " - "coms stack_ptr_delta -1* com
    }
}
:flush_stack_ptr_delta {
    if stack_ptr_delta 0 > {
        "    add     r12, "coms stack_ptr_delta com "\n"coms
    } else if stack_ptr_delta 0 < {
        "    sub     r12, "coms stack_ptr_delta -1* com "\n"coms
    }
    0 =stack_ptr_delta
}
:update_stack_ptr_delta {
    stack_ptr_delta+ =stack_ptr_delta
    if optimize_mode not {
        flush_stack_ptr_delta
    }
}

// item --
:force_compile_push {
    -8 update_stack_ptr_delta
    "    mov     qword [r12"coms com_stack_delta "], "coms coms "\n"coms
}

$static char[32] push_cache
:flush_push_cache {
    if &push_cache@ {
        &push_cache force_compile_push
        NULL &push_cache!
    }
}

// item --
:compile_push {
    if optimize_mode {
        flush_push_cache
        &push_cache strcpy
        return
    }
    force_compile_push
}

:compile_stack_shrink {
    if &push_cache@ {
        NULL &push_cache!
        return
    }
    8 update_stack_ptr_delta
}

// item --
:compile_pop {
    if &push_cache@ {
        if dup &push_cache strcmp {
            "    mov     "coms coms ", "coms &push_cache coms "\n"coms
        } else {
            drop
        }
        NULL &push_cache!
        return
    }
    "    mov     "coms coms ", qword [r12"coms com_stack_delta "]\n"coms
    8 update_stack_ptr_delta
}

// b_register instruction name --
:compile_basic_binop {
    "    ; "coms_dbg coms_dbg "\n"coms_dbg
    "rcx" compile_pop
    "rax" compile_pop
    "    "coms coms " \trax, "coms coms "\n"coms
    "rax" compile_push
}

// op_ptr -- new_op_ptr
:compile_op {
    $char[32] buf_name
    if viewok OKind.NOOP == {}
    else if viewok OKind.EXIT == {
        "    ; OP_EXIT\n"coms_dbg
        "rdi" compile_pop
        "    mov     eax, 60\n"coms
        "    syscall\n"coms
    }
    else if viewok OKind.CALL == {
        "    ; OP_CALL\n"coms_dbg
        "rax" compile_pop
        flush_stack_ptr_delta
        "    call    rax\n"coms
    }
    else if viewok OKind.PUSH_FN == {
        "    ; OP_PUSH_FN\n"coms_dbg
        "    lea     rax, [rel f_"coms viewod com "]\n"coms
        "rax" compile_push
    }
    else if viewok OKind.CALL_FN == {
        flush_push_cache
        flush_stack_ptr_delta
        "    ; OP_CALL_FN\n"coms_dbg
        "    call    f_"coms viewod com "\n"coms
    }
    else if viewok OKind.RET == {
        flush_push_cache
        flush_stack_ptr_delta
        "    ; OP_RET\n"coms_dbg
        "    leave\n"coms
        "    ret\n"coms
    }
    else if viewok OKind.PUSH_INT == {
        "    ; OP_PUSH_INT\n"coms_dbg
        if viewod dup (1 31 << 1- >) swap (1 31 << -1* <) | {
            flush_push_cache
            "    mov     rax, "coms viewod com "\n"coms
            "rax" compile_push
        } else {
            viewod &buf_name itoa
            &buf_name compile_push
        }
    }
    else if viewok OKind.DROP == {
        "    ; OP_DROP\n"coms_dbg
        compile_stack_shrink
    }
    else if viewok OKind.PICK == {
        "    ; OP_PICK\n"coms_dbg
        "rax" compile_pop
        flush_stack_ptr_delta
        "    mov     rax, [r12 + rax*8]\n"coms
        "rax" compile_push
    }
    else if viewok OKind.ROLL == {
        "    ; OP_ROLL\n"coms_dbg
        "rax" compile_pop
        flush_push_cache
        flush_stack_ptr_delta
        "    mov     rcx, [r12 + rax*8]\n"coms
        "    lea     rbx, [r12 + rax*8]\n"coms
        "    .ral_"coms viewod com ":\n"coms
        "    cmp     rbx, r12\n"coms
        "    je      .rbl_"coms viewod com "\n"coms
        "    mov     rdx, [rbx - 8]\n"coms
        "    mov     [rbx], rdx\n"coms
        "    sub     rbx, 8\n"coms
        "    jmp     .ral_"coms viewod com "\n"coms
        "    .rbl_"coms viewod com ":\n"coms
        "    mov     [r12], rcx\n"coms
    }
    else if viewok OKind.DEPTH == {
        flush_push_cache
        flush_stack_ptr_delta
        "    ; OP_DEPTH\n"coms_dbg
        "    mov     rax, bsp + "coms ASM_STACK_SIZE com "\n"coms
        "    sub     rax, r12\n"coms
        "    shr     rax, 3\n"coms
        "rax" compile_push
    }
    else if viewok OKind.PUSH_BUF == {
        "b_" &buf_name strcpy
        viewod &buf_name 2+ itoa
        "    ; OP_PUSH_BUF\n"coms_dbg
        &buf_name compile_push
    }
    else if viewok OKind.STORE == {
        "    ; OP_STORE\n"coms_dbg
        "rax" compile_pop
        "rcx" compile_pop
        "    mov     [rax], rcx\n"coms
    }
    else if viewok OKind.FETCH == {
        "    ; OP_FETCH\n"coms_dbg
        "rax" compile_pop
        "    mov     rax, qword [rax]\n"coms
        "rax" compile_push
    }
    else if viewok OKind.PUSH_VAR == {
        flush_push_cache
        "    ; OP_PUSH_VAR\n"coms_dbg
        "    lea     rax, [rbp - "coms viewod com "]\n"coms
        "rax" compile_push
    }
    else if viewok OKind.ALLOC == {
        "    ; OP_ALLOC\n"coms_dbg
        "    sub     rsp, "coms viewod com "\n"coms
    }
    else if viewok OKind.ADD == {
        "rcx" "add" "OP_ADD" compile_basic_binop
    }
    else if viewok OKind.SUB == {
        "rcx" "sub" "OP_SUB" compile_basic_binop
    }
    else if viewok OKind.MUL == {
        "rcx" "imul" "OP_MUL" compile_basic_binop
    }
    else if viewok OKind.AND == {
        "rcx" "and" "OP_AND" compile_basic_binop
    }
    else if viewok OKind.OR == {
        "rcx" "or" "OP_OR" compile_basic_binop
    }
    else if viewok OKind.XOR == {
        "rcx" "xor" "OP_XOR" compile_basic_binop
    }
    else if viewok OKind.SHL == {
        "cl" "shl" "OP_SHL" compile_basic_binop
    }
    else if viewok OKind.SHR == {
        "cl" "shr" "OP_SHR" compile_basic_binop
    }
    else if viewok OKind.SAR == {
        "cl" "sar" "OP_SAR" compile_basic_binop
    }
    else if viewok OKind.NOT == {
        "    ; OP_NOT\n"coms_dbg
        "rax" compile_pop
        "    not     rax\n"coms
        "rax" compile_push
    }
    else if viewok OKind.EQ == {
        "    ; OP_EQ\n"coms_dbg
        "rax" compile_pop
        "rbx" compile_pop
        "    cmp     rbx, rax\n"coms
        "    sete    al\n"coms
        "    movzx   rax, al\n"coms
        "rax" compile_push
    }
    else if viewok OKind.GT == {
        "    ; OP_GT\n"coms_dbg
        "rax" compile_pop
        "rbx" compile_pop
        "    cmp     rbx, rax\n"coms
        "    setg    al\n"coms
        "    movzx   rax, al\n"coms
        "rax" compile_push
    }
    else if viewok OKind.LT == {
        "    ; OP_LT\n"coms_dbg
        "rax" compile_pop
        "rbx" compile_pop
        "    cmp     rbx, rax\n"coms
        "    setl    al\n"coms
        "    movzx   rax, al\n"coms
        "rax" compile_push
    }
    else if viewok OKind.DIVMOD == {
        "    ; OP_DIVMOD\n"coms_dbg
        "rbx" compile_pop
        "rax" compile_pop
        "    cqo\n"coms
        "    idiv    rbx\n"coms
        "rax" compile_push
        "rdx" compile_push
    }
    else if viewok OKind.LABEL == {
        flush_push_cache
        flush_stack_ptr_delta
        ".l_"coms viewod com ":\n"coms
    }
    else if viewok OKind.JMP == {
        flush_push_cache
        flush_stack_ptr_delta
        "    ; OP_JMP\n"coms_dbg
        "    jmp     .l_"coms viewod com "\n"coms
    }
    else if viewok OKind.JZ == {
        "    ; OP_JZ\n"coms_dbg
        "rax" compile_pop
        flush_stack_ptr_delta
        "    test    rax, rax\n"coms
        "    jz      .l_"coms viewod com "\n"coms
    }
    else if viewok OKind.FOPEN == {
        "    ; OP_FOPEN\n"coms_dbg
        "rax" compile_pop           // mode (0 = read, 1 = write, 2 = append)
        "rsi" compile_pop           // filename pointer
        "    cmp     rax, 0\n"coms
        "    je      .frl_"coms viewod com "\n"coms
        "    cmp     rax, 1\n"coms
        "    je      .fwl_"coms viewod com "\n"coms
        "    cmp     rax, 2\n"coms
        "    je      .fal_"coms viewod com "\n"coms
        "    jmp     .ffl_"coms viewod com "\n"coms
        "    .frl_"coms viewod com ":\n"coms
        "    mov     rdx, 0\n"coms
        "    jmp     .fdl_"coms viewod com "\n"coms
        "    .fwl_"coms viewod com ":\n"coms
        "    mov     rdx, 577\n"coms
        "    jmp     .fdl_"coms viewod com "\n"coms
        "    .fal_"coms viewod com ":\n"coms
        "    mov     rdx, 1089\n"coms
        "    jmp     .fdl_"coms viewod com "\n"coms
        "    .fdl_"coms viewod com ":\n"coms
        "    mov     rax, 257\n"coms
        "    mov     rdi, -100\n"coms
        "    mov     r10, 420\n"coms
        "    syscall\n"coms
        "rax" force_compile_push    // push FD (or -1 on error)
        flush_stack_ptr_delta
        "    jmp     .fel_"coms viewod com "\n"coms
        "    .ffl_"coms viewod com ":\n"coms
        "    mov     rax, -1\n"coms
        "rax" force_compile_push
        flush_stack_ptr_delta
        "    .fel_"coms viewod com ":\n"coms
    }
    else if viewok OKind.FREAD == {
        "    ; OP_FREAD\n"coms_dbg
        "rdi" compile_pop           // file descriptor
        "rdx" compile_pop           // length
        "rsi" compile_pop           // buffer pointer
        "    mov     rax, 0\n"coms  // sys_read
        "    syscall\n"coms
        "rax" compile_push          // bytes read or -1
    }
    else if viewok OKind.FWRITE == {
        "    ; OP_FWRITE\n"coms_dbg
        "rdi" compile_pop           // file descriptor
        "rdx" compile_pop           // length
        "rsi" compile_pop           // buffer pointer
        "    mov     rax, 1\n"coms  // sys_write
        "    syscall\n"coms
        "rax" compile_push          // bytes written or -1
    }
    else if viewok OKind.FCLOSE == {
        "    ; OP_FCLOSE\n"coms_dbg
        "rdi" compile_pop           // file descriptor
        "    mov     rax, 3\n"coms  // sys_close
        "    syscall\n"coms
        "rax" compile_push          // return 0 or -1
    }
    else {
        "ERROR: Invalid opcode of type "puts viewok put "\n"puts
        1 exit
    }
    %Op+
}

// op_ptr --
:compile_ops {
    while viewok { compile_op }
    drop
}

// idx map_slot_ptr -- idx
:compile_function {
    if debug_mode {
        "; "coms dup->Function.key.name@ coms "\n"coms
    }
    "f_"coms over com ":\n"coms
    "    push    rbp\n"coms
    "    mov     rbp, rsp\n"coms
    ->Function.def@ compile_ops
}

:compile_functions {
    // -- idx
    0 while dup MAP_SIZE < {
        // -- idx slot_ptr
        dup FN_MAP map_idx
        if dup slot_is_used { compile_function }
        else { drop }
        1+
    } drop
}

// char -- bool
:should_print_char {
    dup is_print
    swap (dup ('\\' !=) swap ('"' !=) &) &
    USE_ASM_STRINGS &
}

// init --
:compile_buf_str {
    $char is_quote: {false}
    while dup@c {
        if dup@c should_print_char {
            if is_quote not {
                "\""coms
                true =is_quote
            }
            dup@c comc
        } else {
            if is_quote {
                "\","coms
                false =is_quote
            }
            dup@c com
            ","coms
        }
        1+
    } drop

    if is_quote {
        "\","coms
    }
    "0\n" coms
}

:compile_inline_bufs {
    "    ; Inline Buffers\n"coms_dbg
    // -- idx
    0 while dup &inline_bufs stack_len < {
        "    b_"coms dup MAP_SIZE+ com " db "coms
        dup &inline_bufs %ptr stack_get@ compile_buf_str
        1+
    } drop
}

// idx --
:compile_buf_data {
    $int buf_size: {dup BUF_MAP map_idx->Buffer.size@}

    if debug_mode {
        "    ; "coms dup BUF_MAP map_idx->Buffer.key.name@ coms "\n"coms
    }
    "    b_"coms dup com

    if dup BUF_MAP map_idx->Buffer.init_int@c {
        if buf_size 1 == {
            " db "coms BUF_MAP map_idx->Buffer.init@ com "\n"coms
        } else if buf_size 8 == {
            " dq "coms BUF_MAP map_idx->Buffer.init@ com "\n"coms
        }
    } else {
        " db "coms
        dup BUF_MAP map_idx->Buffer.init@ compile_buf_str
        if (dup BUF_MAP map_idx->Buffer.init@ strlen 1+) (buf_size) < {
            "        times "coms buf_size com " - ($ - b_"coms dup com ") db 0\n"coms
        }
        drop
    }
}

// idx --
:compile_buf_bss {
    "    b_"coms dup com " resb "coms BUF_MAP map_idx->Buffer.size@ com
    if debug_mode {
        " ; "coms dup BUF_MAP map_idx->Buffer.key.name@ coms
    }
    "\n"coms
}

// idx -- bool
:is_valid_static_buffer {
    BUF_MAP map_idx
    dup->Buffer.key.name@ flag
    swap->Buffer.is_static@c
    &
}

:pub compile_program_x86_64_linux_nasm {
    "BITS 64\n"coms
    "global _start\n"coms
    "section .text\n"coms
    compile_functions

    "; start\n"coms_dbg
    "_start:\n"coms
    "    lea     r12, [bsp + "coms ASM_STACK_SIZE com "]\n"coms
    "    lea     rax, [rsp + 8]\n"coms
    "rax" force_compile_push
    "    mov     rax, [rsp]\n"coms
    "rax" force_compile_push
    &start_ops_mem->StackHead.data compile_ops

    "section .data\n"coms

    // -- idx
    0 while dup MAP_SIZE < {
        if dup dup (is_valid_static_buffer) swap (BUF_MAP map_idx->Buffer.init@ flag) & {
            dup compile_buf_data
        }
        1+
    } drop
    compile_inline_bufs

    "section .bss\n"coms
    // -- idx
    0 while dup MAP_SIZE < {
        if dup dup (is_valid_static_buffer) swap (BUF_MAP map_idx->Buffer.init@ not) & {
            dup compile_buf_bss
        }
        1+
    } drop
    "    bsp: resb "coms ASM_STACK_SIZE com "\n"coms
}