#use "stdstr.4c"
#use "config.4c"

// strref -- hash
:hash {
    5381
    while over@c {
        dup 5 << + over@c +
        swap 1+ swap
    }
    nip
    if dup 0 < { -1* }
}

// slot_ptr -- bool
:slot_is_empty { @ not }
// slot_ptr -- bool
:slot_is_used { @ flag }
// idx map_ref slot_size -- slot_ptr
:map_idx { rot* + }

// key map_ref slot_size idx -- key map_ref slot_size idx slot_ptr bool
:_map_slot_skip {
    // -- key map_ref slot_size idx slot_ptr
    over over* 3 pick +
    if dup slot_is_empty {
        false
    } else {
        dup@ 5 pick strcmp flag
    }
}
// key map_ref slot_size -- slot_ptr
:map_get {
    2 pick hash MAP_SIZE %
    // -- key map_ref slot_size idx slot_ptr
    while _map_slot_skip {
        drop
        1+ MAP_SIZE %
    }
    nip nip nip nip
}
// key map_ref slot_size -- idx
:map_get_idx {
    2 pick hash MAP_SIZE %
    // -- key map_ref slot_size idx slot_ptr
    while _map_slot_skip {
        drop
        1+ MAP_SIZE %
    }
    drop nip nip nip
}
// key map_ref slot_size -- bool
:map_contains {
    map_get slot_is_used
}

// key scope map_ref slot_size idx -- key scope map_ref slot_size idx slot_ptr bool
:_scoped_map_slot_skip {
    // -- key scope map_ref slot_size idx slot_ptr
    over over* 3 pick +
    if dup slot_is_empty {
        false
    } else if dup@ 6 pick streq {
        dup->ScopedKey.scope@ 5 pick !=
    } else {
        true
    }
}
// key scope map_ref slot_size -- slot_ptr
:scoped_map_get {
    3 pick hash MAP_SIZE %
    // -- key scope map_ref slot_size idx slot_ptr
    while _scoped_map_slot_skip {
        drop
        1+ MAP_SIZE %
    }
    nip nip nip nip nip
}
// key scope map_ref slot_size -- idx
:scoped_map_get_idx {
    3 pick hash MAP_SIZE %
    // -- key scope map_ref slot_size idx slot_ptr
    while _scoped_map_slot_skip {
        drop
        1+ MAP_SIZE %
    }
    drop nip nip nip nip
}
// key scope map_ref slot_size -- bool
:scoped_map_contains {
    scoped_map_get slot_is_used
}