#include "std/stdref.5th"
#include "std/stdstr.5th"
#include "src/config.5th"

// str_ref --- hash
:hash {
    5381
    while over@c {
        dup 5 << + over@c +
        swap 1+ swap
    }
    swap drop

    if dup 0 < {
        -1 *
    }
}

// key map_ref ---
:set_insert {
    // key map_ref idx
    over hash MAP_SIZE %
    // key map_ref idx ref
    while dup 8* 2 pick + dup @ {
        drop
        1+ MAP_SIZE %
    }
    // map_ref idx
    3 roll swap !
    drop drop
}

// key map_ref --- [idx, -1]
:set_key_idx {
    // key map_ref idx
    over hash MAP_SIZE %
    // key map_ref idx slot_value
    while dup 8* 2 pick + @ dup {
        // key map_ref idx
        if 3 pick str_eq {
            swap drop
            swap drop
            return
        }
        1+ MAP_SIZE %
    }
    drop drop drop drop
    -1
}

// idx set_ref --- value
:set_get_idx {
    swap 8* + @
}

// key set_ref --- bool
:set_contains {
    set_key_idx is_success
}

// key value map_ref idx --- key value map_ref idx ref bool
:map_insert_skip_slot {
    // key value map_ref idx ref
    dup 16* 2 pick +

    // Not occupied
    if dup@ not {
        false
    // Occupied (same name)
    } else if dup@ 5 pick str_eq {
        false
    // Occupied (different name)
    } else {
        true
    }
}

// key value map_ref ---
:map_insert {
    // key value map_ref idx
    2 pick hash MAP_SIZE %
    // key value map_ref idx ref
    while map_insert_skip_slot {
        drop
        1+ MAP_SIZE %
    }
    // value map_ref idx ref
    4 roll over !
    // map_ref idx
    3 roll swap 8+ !
    drop drop
}

// key map_ref --- [idx, -1]
:map_key_idx {
    // key map_ref idx
    over hash MAP_SIZE %
    // key map_ref idx slot_value
    while dup 16* 2 pick + @ dup {
        // key map_ref idx
        if 3 pick str_eq {
            swap drop
            swap drop
            return
        }
        1+ MAP_SIZE %
    }
    drop drop drop drop
    -1
}

// idx map_ref --- value
:map_get_idx_key {
    swap 16* + @
}

// idx map_ref --- value
:map_get_idx {
    swap 16* 8+ + @
}

// key map_ref --- [value, 0]
:map_get {
    // map_ref key map_ref
    swap over
    // map_ref idx
    if map_key_idx dup is_success {
        16* 8+ + @
    } else {
        drop drop
        0
    }
}