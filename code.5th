#%{over over / * -}

#false{0}
#true{1}
#!={== 1 ^}

#dup{0 pick}
#over{1 pick}

// Print a newline
#cr{'\n'.c}
#show{dup .}
#showln{dup . cr}
:out_str{
    while dup fetch 256 % 0 != {
        dup fetch .c
        1 +
    } drop
}
#.s{out_str}

#dowhile(__ops __cond) {
    __ops
    while __cond {
        __ops
    }
}

#for(__init __cond __iter __ops) {
    __init
    while __cond {
        __ops
        __iter
    } drop
}

"Hello World!\n".s

:fib {
    1 showln
    1 showln
    while (dup 1_000_000 <) {
        swap over + showln
    } drop drop
}

fib