#%{over over / * -}

#false{0}
#true{1}
#!={== 1 ^}

#dup{0 pick}
#over{1 pick}
#swap{1 roll}
#rot{2 roll}

:storec {
    dup fetch 255 ~ &
    rot |
    swap store
}
:fetchc {
    fetch 256 %
}

#dowhile(__ops __cond) {
    __ops
    while __cond {
        __ops
    }
}

#for(__init __cond __iter __ops) {
    __init
    while __cond {
        __ops
        __iter
    }
}

$__stdout_buf 20
:out_char {
    &__stdout_buf store
    &__stdout_buf 1 stdout
}
#.c{out_char}
:out_int {
    0 dowhile({
        &__stdout_buf 19 + over -
        rot dup 10 % '0' +
        rot storec
        10 /
        swap 1 +
    } {over})
    &__stdout_buf 20 + over - swap
    stdout drop
}
#.{out_int}
:out_str{
    while dup fetchc {
        dup fetch .c
        1 +
    } drop
}
#.s{out_str}
#cr{'\n'.c}
#show{dup .}
#showln{dup . cr}

123 . cr